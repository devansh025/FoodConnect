rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // RESTAURANTS can manage their own food donations
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == restaurantId;

      match /food_donations/{foodId} {
        allow read: if true;

        // Allow restaurant to delete
        allow delete: if request.auth != null && request.auth.uid == restaurantId;

        // Allow restaurant or NGO to update reserved fields only
        allow update: if request.auth != null &&
          (request.auth.uid == resource.data.reserved_by || request.auth.uid == restaurantId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reserved_by', 'reserved_at']);
      }

      match /res_history/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == restaurantId;
      }
    }

    // NGOs can manage their own reservations
    match /ngos/{ngoId} {
      allow read, write: if request.auth != null && request.auth.uid == ngoId;

      match /food_reservations/{reservationId} {
        allow create: if request.auth != null && request.auth.uid == ngoId;
        allow read: if request.auth != null && request.auth.uid == ngoId;
      }

      match /ngo_history/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == ngoId;
      }
    }

    // food_reservations collection (for global view or admin use)
    match /food_reservations/{reservationId} {
      allow read: if true;
      allow write: if false; // Still blocking writes here
    }

    // ANNOUNCEMENTS - read only
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
